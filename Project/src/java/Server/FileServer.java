package Server;

import Gateway.ClientController;
import Protocol.Protocol;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Scanner;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;

public class FileServer implements Runnable {

    private final int port;
    private final Path directory;
    private ServerSocket server;

    public FileServer(int port) throws IOException {
        this.port = port;
        directory = Paths.get("C:\\Users\\Octaviano\\Desktop\\Operating_System", Integer.toString(port));

        /*Create directory to serve as the file repository of the file server*/
        if (Files.notExists(directory)) {
            Files.createDirectories(directory);
        }
    }

    public int getPort() {
        return port;
    }

    public boolean isClosed() {
        return server.isClosed();
    }

    public void stop() throws IOException {
        server.close();
        System.out.println("File server " + InetAddress.getLocalHost().getHostAddress() + ":" + port + " was closed");
    }

    /**
     * Establish a server socket and generate its structure as a server.
     */
    @Override
    public void run() {
        try {
            /*Create a new server socket for this file server*/
            server = new ServerSocket(port);
            String ipAddress = InetAddress.getLocalHost().getHostAddress();
            String localPort = Integer.toString(server.getLocalPort());
            String addressPort = ipAddress + ":" + localPort;
            System.out.println("File server " + addressPort + " started.");

            /*Inform the gateway that this server is alive*/
            URL gateway = new URL("http://localhost:8080/Project/faces/register.xhtml?ip=" + ipAddress + "&port=" + localPort);
            try (InputStream is = gateway.openStream()) {
                System.out.println("File server " + addressPort + " connected to the gateway.");
            }

            /*File server operations*/
            while (true) {
                try (Socket accept = server.accept();
                        InputStream is = accept.getInputStream()) {
                    switch (is.read()) {
                        case Protocol.FILE_LIST:
                            try (ObjectOutputStream oos = new ObjectOutputStream(accept.getOutputStream())) {
                                Set<String> list = Files.list(directory)
                                        .map(f -> f.getFileName().toString())
                                        .collect(Collectors.toSet());
                                oos.writeObject(list);
                                oos.flush();
                                System.out.println("File list was generated by " + addressPort);
                            }
                            break;
                        case Protocol.UPLOAD:
                            try (BufferedReader br = new BufferedReader(new InputStreamReader(is))) {
                                String fileName = br.readLine();
                                long size = Files.copy(is, directory.resolve(fileName), StandardCopyOption.REPLACE_EXISTING);
                                System.out.println("File " + fileName + " was uploaded to " + addressPort + " with the size of " + size);
                            } catch (IOException e) {
                                System.out.println(e);
                            }
                            break;
                        case Protocol.DOWNLOAD:
                            System.out.println("someon eis accesing download");
                            try (OutputStream os = accept.getOutputStream();
                                    BufferedReader br = new BufferedReader(new InputStreamReader(is))) {
                                String fileName = br.readLine();
                                Path fileInDirectory = directory.resolve(fileName);
                                boolean exists = Files.exists(fileInDirectory);
                                System.out.println("File download was generated by " + addressPort);

                                /*Send 1 if file exists, 0 if not*/
                                os.write(exists ? 1 : 0);
                                os.flush();
                                System.out.println("File " + fileName + "exists at " + addressPort);

                                /*Perform downloading if file exists*/
                                if (exists) {
                                    os.write((int) Files.size(fileInDirectory));
                                    int size = sendFileBytes(fileInDirectory, os);
                                    System.out.println("File " + fileName + " from " + addressPort + " was sent successfully with the size of " + size);
                                }
                            }
                            break;

                        /*Sends all files of this server starting with a set of file names*/
                        case Protocol.COPY_ALL:
                            try (OutputStream os = accept.getOutputStream();
                                    ObjectOutputStream oos = new ObjectOutputStream(os)) {
                                Set<String> list = sendFileList(oos);
                                for (String fileName : list) {
                                    Path fileInDirectory = directory.resolve(fileName);
                                    int size = sendFileBytes(fileInDirectory, os);
                                }
                            }
                            break;

                        /*Receives all files of this server starting with a set of file names*/
                        case Protocol.PASTE_ALL:
                            try (ObjectInputStream ois = new ObjectInputStream(is)) {
                                Set<String> list = (Set<String>) ois.readObject();
                                for (String fileName : list) {
                                    Path fileInDirectory = directory.resolve(fileName);
                                    Files.copy(is, fileInDirectory, StandardCopyOption.REPLACE_EXISTING);
                                }
                            }
                            break;

                        case Protocol.DELETE_ALL:
                            Files.list(directory).forEach(file -> {
                                try {
                                    Files.delete(file);
                                    System.out.println("Deleted file: " + file.getFileName());
                                } catch (IOException ex) {
                                    Logger.getLogger(FileServer.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            });
                            break;
                        default:
                            PrintWriter out = new PrintWriter(accept.getOutputStream());
                            out.println("HTTP/1.1 200 OK");
                            out.println("Content-Type: text/html");
                            out.println("\r\n");
                            out.println("<p> Hello world </p>");
                            out.println("port: " + addressPort);
                            out.flush();

                            out.close();
                    }
                }
            }
        } catch (SocketException ex) {
            //Socket is closed
            System.out.println(ex + " " + port);
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(ClientController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private Set<String> sendFileList(ObjectOutputStream oos) throws IOException {
        Set<String> list = Files.list(directory)
                .map(f -> f.getFileName().toString())
                .collect(Collectors.toSet());
        oos.writeObject(list);
        oos.flush();
        return list;
    }

    private int sendFileBytes(Path fileInDirectory, OutputStream os) throws IOException {
        try (InputStream fileSelected = Files.newInputStream(fileInDirectory);
                DataInputStream dis = new DataInputStream(fileSelected);
                DataOutputStream dos = new DataOutputStream(os)) {
            byte[] buffer = new byte[8192];
            int length;
            int total = 0;
            while ((length = dis.read(buffer, 0, buffer.length)) > 0) {
                dos.write(buffer, 0, length);
                total += length;
            }
            dos.flush();
            return total;
        }
    }

    public static void main(String[] args) throws IOException {
        ExecutorService es = Executors.newSingleThreadExecutor();
        Scanner sc = new Scanner(System.in);
        String input = "1";
        System.out.print("Enter port: ");
        input = sc.nextLine();
        FileServer server = new FileServer(Integer.parseInt(input));
        es.execute(server);
        while (true) {
            System.out.println("Syntax [stop|start] <port number> or \"exit\" to quit.");
            input = sc.nextLine();
            if (input != null && !"exit".equalsIgnoreCase(input)) {

                if (input.equalsIgnoreCase("stop")) {
                    server.stop();
                }
                if (input.equalsIgnoreCase("start")) {
                    es.execute(server);
                }
            } else if (input.equalsIgnoreCase("exit")) {
                server.stop();
            }
        }

        try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {
            String input = br.readLine();
            int port = Integer.parseInt(input);
            FileServer server = new FileServer(port);
            es.execute(server);
            System.out.print("Press enter to close: ");
            input = br.readLine();
            System.out.print("Press enter to open: ");
            input = br.readLine();
            System.out.print("Press 'exit' to open: ");
            input = br.readLine();

            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                try {
                    server.stop();
                } catch (IOException ex) {
                    Logger.getLogger(FileServer.class.getName()).log(Level.SEVERE, null, ex);
                }
                es.shutdown();
            }));
        } catch (IOException ex) {
            Logger.getLogger(ClientController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
